<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - EduAxis</title>
    <link rel="icon" href="https://via.placeholder.com/32/007bff/fff?text=EA" />
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/uikit@latest/dist/css/uikit.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous" />
    <style>
        .checkout-container {
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }
        .form-section {
            background: #fff;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .form-section h2 {
            margin-bottom: 15px;
            color: #222;
        }
        .saved-addresses .address-option {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
            cursor: pointer;
        }
        .saved-addresses .address-option input {
            margin-right: 10px;
        }
        .new-address-form {
            display: none;
            margin-top: 20px;
        }
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .form-group input, .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .form-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        .payment-options .payment-option {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        .payment-options .payment-option img {
            width: 40px;
            margin-right: 10px;
        }
        .payment-form {
            display: none;
            margin-top: 15px;
        }
        .order-summary {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .summary-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        .summary-item.total {
            font-weight: bold;
            font-size: 1.2em;
            border-bottom: none;
        }
        .submit-btn, .cancel-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .submit-btn {
            background: #007bff;
            color: #fff;
        }
        .cancel-btn {
            background: #6c757d;
            color: #fff;
        }
        .add-address-btn {
            background: #28a745;
            color: #fff;
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="content" class="checkout-container" data-uk-height-viewport="expand: true">
        <h1 class="uk-heading-medium uk-text-center uk-margin-medium-bottom">Payment Portal</h1>
        <div id="flash-container" class="mb-3"></div>

        <div class="form-section">
            <h2>Amount</h2>
            <div class="form-group">
                <label>Admin-set Amount</label>
                <input type="text" id="amountInput" class="form-control" disabled>
                <small class="text-muted" id="planTitle"></small>
            </div>
            <h2>Payment Method</h2>
            <div class="payment-options">
                <div class="payment-option" onclick="togglePaymentForm('card')">
                    <input type="radio" name="payment" id="creditCard" value="card">
                    <label for="creditCard">
                        <img src="https://logos-world.net/wp-content/uploads/2020/04/Visa-Logo.png" alt="Visa" class="bank-logo">
                        <img src="https://logos-world.net/wp-content/uploads/2020/07/Mastercard-Logo.png" alt="MasterCard" class="bank-logo">
                        Credit/Debit Card
                    </label>
                </div>
                <div class="payment-form" id="cardForm">
                    <h3>Enter Card Details</h3>
                    <form id="cardDetailsForm" onsubmit="saveCardDetails(event)">
                        <div class="form-group">
                            <label>Card Number</label>
                            <input type="text" id="cardNumber" required 
                                maxlength="19" 
                                pattern="[0-9\s]{13,19}"
                                onkeypress="return onlyNumbers(event)"
                                onkeyup="formatCardNumber(this)"
                                placeholder="XXXX XXXX XXXX XXXX">
                        </div>
                        <div class="form-grid">
                            <div class="form-group">
                                <label>Expiration Date</label>
                                <input type="text" id="expiryDate" 
                                    placeholder="MM/YY" 
                                    maxlength="5"
                                    onkeypress="return onlyNumbers(event)"
                                    onkeyup="formatExpiry(this)"
                                    pattern="(0[1-9]|1[0-2])\/([0-9]{2})"
                                    required>
                            </div>
                            <div class="form-group">
                                <label>CVV</label>
                                <input type="text" id="cvv" 
                                    required 
                                    maxlength="3"
                                    pattern="[0-9]{3}"
                                    onkeypress="return onlyNumbers(event)"
                                    placeholder="XXX">
                            </div>
                        </div>
                        <div class="form-actions">
                            <button type="submit" class="submit-btn">Save Card</button>
                        </div>
                    </form>
                </div>

                <div class="payment-option" onclick="togglePaymentForm('upi')">
                    <input type="radio" name="payment" id="upi" value="upi">
                    <label for="upi">
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/UPI-Logo-vector.svg/1200px-UPI-Logo-vector.svg.png" alt="UPI" class="bank-logo">
                        UPI
                    </label>
                </div>
                <div class="payment-form" id="upiForm">
                    <h3>Enter UPI ID</h3>
                    <form id="upiDetailsForm" onsubmit="saveUpiDetails(event)">
                        <div class="form-group">
                            <label>UPI ID</label>
                            <input type="text" 
                                   id="upiId" 
                                   required 
                                   pattern="[a-zA-Z0-9._-]+@[a-zA-Z0-9]+$"
                                   placeholder="username@upi"
                                   oninput="validateUpiId(this)">
                            <small class="text-muted">Example: yourname@okicici or yourname@oksbi</small>
                        </div>
                        <div class="form-actions">
                            <button type="submit" class="submit-btn">Save UPI</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="order-summary">
            <h2>Fee Details</h2>
            <div class="summary-item">
                <span>Plan</span>
                <span id="summaryPlanTitle">â€”</span>
            </div>
            <div class="summary-item total">
                <span>Total</span>
                <span id="totalAmount">0.00</span>
            </div>
            <button id="placeOrderBtn" type="button" class="submit-btn w-100 mt-3">Finish Payment</button>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/uikit@latest/dist/js/uikit.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/uikit@latest/dist/js/uikit-icons.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
        function togglePaymentForm(type) {
            const cardForm = document.getElementById('cardForm');
            const upiForm = document.getElementById('upiForm');
            const cardRadio = document.getElementById('creditCard');
            const upiRadio = document.getElementById('upi');
            if (type === 'card') {
                cardForm.style.display = cardForm.style.display === 'block' ? 'none' : 'block';
                upiForm.style.display = 'none';
                cardRadio.checked = true;
                upiRadio.checked = false;
            } else if (type === 'upi') {
                upiForm.style.display = upiForm.style.display === 'block' ? 'none' : 'block';
                cardForm.style.display = 'none';
                upiRadio.checked = true;
                cardRadio.checked = false;
            } else {
                cardForm.style.display = 'none';
                upiForm.style.display = 'none';
                cardRadio.checked = false;
                upiRadio.checked = false;
            }
        }

        function saveCardDetails(event) {
            event.preventDefault();
            showFlash('success', 'Card details saved!');
        }

        let savedUpiId = '';

        function validateUpiId(input) {
            const upiId = input.value.trim();
            const upiRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9]+$/;
            
            if (upiId && !upiRegex.test(upiId)) {
                input.setCustomValidity('Please enter a valid UPI ID (e.g., username@bankhandle)');
            } else {
                input.setCustomValidity('');
            }
        }

        function saveUpiDetails(event) {
            event.preventDefault();
            const upiInput = document.getElementById('upiId');
            const upiId = upiInput.value.trim();
            
            if (!upiId) {
                showFlash('warning', 'Please enter a UPI ID');
                return;
            }

            // Common UPI handles in India
            const validHandles = ['okaxis', 'okhdfcbank', 'okicici', 'oksbi', 'ybl', 'paytm', 'gpay', 'apl', 'axl', 'ibl', 'upi'];
            const [username, handle] = upiId.split('@');
            
            if (!handle || !validHandles.includes(handle.toLowerCase())) {
                showFlash('warning', 'Please use a valid UPI handle (e.g., @okicici, @oksbi, @paytm)');
                return;
            }

            // Save the UPI ID
            savedUpiId = upiId;
            showFlash('success', 'UPI details saved successfully!');
            
            // Collapse the UPI form
            togglePaymentForm('upi');
        }

        // --- MODIFIED SCRIPT ---
        document.getElementById('placeOrderBtn').addEventListener('click', async () => {
            const button = document.getElementById('placeOrderBtn');
            
            // Amount is enforced by admin-set plan on the server
            const manualAmountInput = document.getElementById('amountInput');
            const amount = parseFloat((manualAmountInput.value || '0').replace(/[,\s]/g, ''));
            const paymentFor = window.currentPlanTitle || "Fees Plan";
            const selected = document.querySelector('input[name="payment"]:checked');
            const paymentMethod = selected ? selected.value : null;

            // Validate payment method selection
            if (!paymentMethod) {
                showFlash('warning', 'Please select a payment method (Card or UPI).');
                return;
            }

            // Validate card details if card payment is selected
            if (paymentMethod === 'card') {
                const cardNumber = document.getElementById('cardNumber').value;
                const expiryDate = document.getElementById('expiryDate').value;
                const cvv = document.getElementById('cvv').value;

                if (!cardNumber || !expiryDate || !cvv) {
                    showFlash('warning', 'Please fill in all card details before proceeding.');
                    return;
                }

                // Validate card number format (should contain only numbers and spaces)
                if (!/^[0-9\s]{13,19}$/.test(cardNumber)) {
                    showFlash('warning', 'Please enter a valid card number.');
                    return;
                }

                // Validate expiry date format (MM/YY)
                if (!/^(0[1-9]|1[0-2])\/([0-9]{2})$/.test(expiryDate)) {
                    showFlash('warning', 'Please enter a valid expiry date (MM/YY).');
                    return;
                }

                // Validate CVV (3 digits)
                if (!/^[0-9]{3}$/.test(cvv)) {
                    showFlash('warning', 'Please enter a valid 3-digit CVV.');
                    return;
                }
            }

            // Validate UPI ID if UPI payment is selected
            if (paymentMethod === 'upi') {
                if (!savedUpiId) {
                    showFlash('warning', 'Please save your UPI ID before proceeding with the payment.');
                    return;
                }
            }

            button.disabled = true;
            button.textContent = 'Processing...';

            try {
                const response = await fetch('/fees/record-payment', { // Corrected endpoint
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ amount, paymentFor, paymentMethod }),
                });

                if (response.ok) {
                    showFlash('success', 'Payment successful and recorded! Redirecting...');
                    setTimeout(() => { window.location.href = '/dashboard'; }, 1200);
                } else {
                    const errorData = await response.json();
                    showFlash('danger', `Payment failed: ${errorData.message}`);
                    button.disabled = false;
                    button.textContent = 'Finish Payment';
                }
            } catch (error) {
                console.error('Error processing payment:', error);
                showFlash('danger', 'An error occurred. Please try again.');
                button.disabled = false;
                button.textContent = 'Finish Payment';
            }
        });

        function showFlash(type, message) {
            const container = document.getElementById('flash-container');
            if (!container) return;
            const map = { success: 'alert-success', info: 'alert-primary', warning: 'alert-warning', danger: 'alert-danger', error: 'alert-danger' };
            const cls = map[type] || 'alert-primary';
            const div = document.createElement('div');
            div.className = `alert ${cls} alert-dismissible fade show`;
            div.setAttribute('role', 'alert');
            div.innerHTML = `
                <span>${message}</span>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            container.appendChild(div);
            setTimeout(() => {
                try { bootstrap.Alert.getOrCreateInstance(div).close(); } catch (e) { div.remove(); }
            }, 1500);
        }

        // Only allow numbers and specific formatting characters
        function onlyNumbers(event) {
            // Allow: backspace, delete, tab, escape, enter, decimal point, hyphens and spaces
            if (event.key === 'Backspace' || event.key === 'Delete' || event.key === 'Tab' || 
                event.key === 'Escape' || event.key === 'Enter' || event.key === '.' || 
                event.key === ' ' || event.key === '-') {
                return true;
            }
            // Block any non-number
            if (isNaN(Number(event.key))) {
                event.preventDefault();
                return false;
            }
            return true;
        }

        // Format card number with spaces every 4 digits
        function formatCardNumber(input) {
            let value = input.value.replace(/\D/g, ''); // Remove non-digits
            value = value.replace(/(\d{4})(?=\d)/g, '$1 '); // Add space every 4 digits
            input.value = value;
        }

        // Format expiry date as MM/YY
        function formatExpiry(input) {
            let value = input.value.replace(/\D/g, '');
            if (value.length >= 2) {
                value = value.substring(0, 2) + '/' + value.substring(2);
            }
            input.value = value;
            
            // Validate date
            if (value.length >= 4) {
                let month = parseInt(value.substring(0, 2));
                let year = parseInt('20' + value.substring(3, 5));
                let today = new Date();
                let currentMonth = today.getMonth() + 1; // JavaScript months are 0-based
                let currentYear = today.getFullYear();

                if (month < 1 || month > 12) {
                    input.setCustomValidity('Please enter a valid month (01-12)');
                } else if (year < currentYear || (year === currentYear && month < currentMonth)) {
                    input.setCustomValidity('Card has expired. Please enter a future date.');
                } else {
                    input.setCustomValidity('');
                }
            }
        }

        // Load current fee plan on page load and set amount
        (async function(){
            try {
                const res = await fetch('/fees/current-plan');
                const plan = await res.json();
                const amtEl = document.getElementById('amountInput');
                const titleEl = document.getElementById('planTitle');
                const totalEl = document.getElementById('totalAmount');
                const payBtn = document.getElementById('placeOrderBtn');
                if (res.ok) {
                    amtEl.value = Number(plan.amount).toLocaleString();
                    titleEl.textContent = `Plan: ${plan.title}`;
                    const planTitleEl = document.getElementById('summaryPlanTitle');
                    if (planTitleEl) planTitleEl.textContent = plan.title;
                    if (totalEl) totalEl.textContent = Number(plan.amount).toFixed(2);
                    window.currentPlanTitle = plan.title;
                    payBtn.disabled = false;
                } else {
                    amtEl.value = '';
                    titleEl.textContent = 'No active fee plan set by admin';
                    const planTitleEl = document.getElementById('summaryPlanTitle');
                    if (planTitleEl) planTitleEl.textContent = 'â€”';
                    if (totalEl) totalEl.textContent = '0.00';
                    payBtn.disabled = true;
                }
            } catch (e) {
                console.error('Failed to load plan', e);
            }
        })();
    </script>
</body>
</html>